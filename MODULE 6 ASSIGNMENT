import keras
import numpy as np
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
(X_train, y_train), (X_test, y_test) = keras.datasets.fashion_mnist.load_data()


# Define the model
model = Sequential()

# Add the first convolutional layer
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)))

# Add a max pooling layer
model.add(MaxPooling2D(pool_size=(2, 2)))

# Add another convolutional layer
model.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))

# Add another max pooling layer
model.add(MaxPooling2D(pool_size=(2, 2)))

# Add another convolutional layer
model.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))

# Flatten the output of the convolutional layers
model.add(Flatten())

# Add a dense layer
model.add(Dense(128, activation='relu'))

# Add dropout layer to reduce overfitting
model.add(Dropout(0.5))

# Add the output layer
model.add(Dense(10, activation='softmax'))

# Compile the model
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Print the model summary
model.summary()
# Select at least two images from the test set for prediction
num_images = 2
selected_indices = np.random.choice(len(X_test), num_images, replace=False)
selected_images = X_test[selected_indices]
selected_labels = y_test[selected_indices]

# Make predictions
predictions = model.predict(selected_images)

# Get class labels
class_labels = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
                'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# Print predictions for selected images
for i in range(num_images):
    predicted_label = class_labels[np.argmax(predictions[i])]
    actual_label = class_labels[selected_labels[i]]
    print(f"Predicted label for image {i+1}: {predicted_label}")
    print(f"Actual label for image {i+1}: {actual_label}")
    print()
